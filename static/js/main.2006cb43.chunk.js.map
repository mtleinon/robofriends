{"version":3,"sources":["serviceWorker.js","Components/redusers.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/ErrorBoundary.js","Containers/CounterButton.js","Containers/Header.js","Containers/App.js","Components/actions.js","Components/constants.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","map","robot","Card_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundary","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","value","info","setState","Component","CounterButton","_PureComponent","updateCount","count","console","log","onClick","color","PureComponent","Header","_getPrototypeOf2","_len","arguments","length","args","Array","_key","apply","shouldComponentUpdate","nextProps","nextState","CounterButton_CounterButton","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","toLowerCase","includes","Header_Header","SearchBox_SearchBox","Scroll_Scroll","ErrorBoundary_ErrorBoundary","CardList_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","then","response","json","data","catch","rootReducers","combineReducers","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2006cb43.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch  = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchField: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true };\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, isPending: false, robots: action.payload };\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, isPending: false, error: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\r\n\r\nexport const Card = ({id, name, email}) =>\r\n    <div className='tc bg-lightest-blue br3 pa3 dib ma2 grow bw2 shadow-5'>\r\n        <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'/>\r\n        <div>\r\n            <h2>{id}. {name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>;","import React from 'react';\r\nimport { Card } from \"./Card\";\r\n\r\nexport const CardList = ({robots}) =>\r\n    <div>\r\n        {\r\n            robots.map((robot) =>\r\n                    <Card key={robot.id} id={robot.id}\r\n                    name={robot.name} email={robot.email}/>\r\n            )\r\n        }\r\n    </div>;\r\n","import React from 'react';\r\n\r\nexport const SearchBox = ({searchChange}) =>\r\n    <div className='pa2'>\r\n        <input className='pa3 ba bg-light-yellow'\r\n               type='search'\r\n               placeholder='Search robots'\r\n               onChange={searchChange}/>;\r\n    </div>;","import React from 'react';\r\n\r\nexport const Scroll = ({children}) =>\r\n        <div style={{overflowY: 'scroll',\r\n                     border: '1px solid black',\r\n                     height: '340px'}}>\r\n            { children }\r\n        </div>;","import React, { Component } from 'react';\r\n\r\nexport class ErrorBoundary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch (error, info) {\r\n        this.setState({error: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <h2>Oops an error happened!!</h2>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}","import {PureComponent} from \"react\";\r\nimport React from \"react\";\r\n\r\nexport class CounterButton extends PureComponent {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => ({count: state.count + 1}) );\r\n    };\r\n\r\n    render() {\r\n        console.log('CounterButton');\r\n        return (\r\n            <button onClick={this.updateCount}\r\n                    color={this.props.color}>\r\n                {this.state.count}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n","import {Component} from \"react\";\r\nimport React from \"react\";\r\n\r\nimport { CounterButton } from './CounterButton';\r\n\r\nexport class Header extends Component {\r\n\r\n    shouldComponentUpdate = (nextProps, nextState) => false;\r\n\r\n    render() {\r\n        console.log('Header');\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>Robot friends</h1>\r\n                <CounterButton/>\r\n            </div>);\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CardList } from \"../Components/CardList\";\r\nimport { SearchBox } from '../Components/SearchBox';\r\nimport { Scroll } from '../Components/Scroll';\r\nimport { ErrorBoundary } from \"./ErrorBoundary\";\r\nimport './App.css';\r\n\r\nimport {requestRobots, setSearchField} from \"../Components/actions\";\r\nimport {Header} from \"./Header\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) =>\r\n                dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n};\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n        if (isPending || robots.length === 0) {\r\n            return <h2>Loading robots ...</h2>;\r\n        } else {\r\n            const filteredRobots = robots.filter(robot =>\r\n                    robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n            return <div className='tc'>\r\n                <Header/>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type:REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error =>\r\n                dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\n//import { createLogger } from \"redux-logger\";\nimport 'tachyons';\n\nimport './index.css';\nimport { searchRobots, requestRobots } from \"./Components/redusers\";\nimport App from \"./Containers/App\";\n\n//const logger = createLogger();\nconst rootReducers = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}